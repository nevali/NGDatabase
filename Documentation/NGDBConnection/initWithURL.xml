<?xml version="1.0" encoding="UTF-8" ?>
<?xml-stylesheet type="text/css" href="../dbook.css" ?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook V5.0//EN" "http://www.oasis-open.org/docbook/xml/5.0/docbook.dtd">
<refentry xmlns="http://docbook.org/ns/docbook" xmlns:html="http://www.w3.org/1999/xhtml">
	<refnamediv>
		<refname>connectionWithURL:options:status:</refname>
		<refpurpose>Initialises a connection instances and establishes a connection to a database.</refpurpose>
	</refnamediv>
	<refsynopsisdiv>
		<methodsynopsis>
			<modifier>-</modifier>
			<type>id</type><methodname>initWithURL:</methodname><methodparam><type>NSURL *</type><parameter>url</parameter></methodparam>
			<methodparam>
				<modifier>options:</modifier><type>NSDictionary *</type><parameter>options</parameter>
			</methodparam>
			<methodparam>
				<modifier>status:</modifier><type>NSError **</type><parameter>status</parameter>
			</methodparam>
		</methodsynopsis>
		<methodsynopsis>
			<modifier>-</modifier>
			<type>id</type><methodname>initWithURLString:</methodname><methodparam><type>NSString *</type><parameter>url</parameter></methodparam>
			<methodparam>
				<modifier>options:</modifier><type>NSDictionary *</type><parameter>options</parameter>
			</methodparam>
			<methodparam>
				<modifier>status:</modifier><type>NSError **</type><parameter>status</parameter>
			</methodparam>
		</methodsynopsis>
	</refsynopsisdiv>
	
	<refsection>
		<title>Parameters</title>
		<variablelist>
			<varlistentry>
				<term><parameter>url</parameter></term>
				<listitem>
					<para>
						For <methodname>connectionWithURL:options:status:</methodname>, 
						an <classname>NSURL</classname> instance representing the
						location of the database to connect to.
					</para>
					<para>
						For <methodname>connectionWithURLString:options:status:</methodname>, 
						a string containing the location of the database to
						connect to, formatted as a URL.
					</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><parameter>options</parameter></term>
				<listitem>
					<para>
						An <classname>NSDictionary</classname> instance containing
						a set of options which should be applied to the new
						connection, or <literal>nil</literal> if no options are
						required.
					</para>
					<para>
						See the description of <methodname><html:a href="initWithURL.xml">initWithURL:options:status</html:a></methodname>
						for further information on the <parameter>options</parameter>
						parameter.
					</para>
				</listitem>
			</varlistentry>

			<varlistentry>
				<term><parameter>status</parameter></term>
				<listitem>
					<para>
						A pointer to an <type><classname>NSError</classname> *</type>
						pointer which will be modified in the event of an error
						to point to a new <classname>NSError</classname> instance
						describing the failure condition. If, for some reason, the
						details of the failure condition are not required, <literal>NULL</literal>
						may be supplied for this parameter.
					</para>
					<para>
						The location pointed to by this parameter may or may not
						be modified in the event of a successful invocation: applications
						should not rely in this situation either upon no modification
						being made, nor	upon it being modified to be <literal>NULL</literal>.
					</para>
				</listitem>
			</varlistentry>
			
		</variablelist>
	</refsection>
	
	<refsection>
		<title>Return value</title>
		<para>
			Upon success, <methodname>connectionWithURL:options:status:</methodname>
			returns an initialised connection instance.
		</para>
		<para>
			Upon failure, <literal>nil</literal> shall be returned, and if
			<parameter>status</parameter> is non-<literal>NULL</literal>, it
			shall be modified to point to an <classname>NSError</classname>
			instance describing the failure condition.
		</para>
	</refsection>
	
	<refsection>
		<title>Discussion</title>
		<para>
			Initialises a connection instance and establishes a database connection given a URL.
		</para>
		<para>
			The instance returned by a successful call to this method will be
			one defined by the driver which is registered for the <property>scheme</property>
			of the specified <parameter>url</parameter>. Applications should not
			generally need to be written with specific awareness of this, although
			developers should be aware that the instance returned will never be
			an instance of <classname>NGDBConnection</classname> itself. Therefore,
			it is important that developers use the result of this method call,
			rather than assuming that the instance returned by <methodname>alloc</methodname>
			is valid provided this method returns successfully.
		</para>
		<para>
			In other words, rather than performing the following:
		</para>
		<programlisting xml:space="preserve"><classname>NGDBConnection</classname> *<varname>db</varname>;
<classname>NSError</classname> *<varname>error</varname> = <literal>NULL</literal>;

<varname>db</varname> = [<classname>NGDBConnection</classname> <methodname>alloc</methodname>];
if(![<varname>db</varname> <methodname>initWithURLString:</methodname><literal>@"sqlite:///Users/me/example.db"</literal> options:<literal>nil</literal> status:&amp;<varname>error</varname>])
{
	<lineannotation>/* Error */</lineannotation>
}
<lineannotation>/* Success */</lineannotation>
		</programlisting>
		<para>
			Applications should instead perform the following:
		</para>
		<programlisting xml:space="preserve"><classname>NGDBConnection</classname> *<varname>db</varname>;
<classname>NSError</classname> *<varname>error</varname> = <literal>NULL</literal>;

<varname>db</varname> = [<classname>NGDBConnection</classname> <methodname>alloc</methodname>];
if(!(<varname>db</varname> = [<varname>db</varname> <methodname>initWithURLString:</methodname><literal>@"sqlite:///Users/me/example.db"</literal> options:<literal>nil</literal> status:&amp;<varname>error</varname>]))
{
	<lineannotation>/* Error */</lineannotation>
}
<lineannotation>/* Success */</lineannotation>
		</programlisting>
		<para>
			More preferable is the usual Cocoa convention of assigning an
			instance variable by storing the result of an  <methodname>initâ€¦</methodname>
			call on the result of an <methodname>alloc</methodname>, which will
			obviously have the same, correct, effect.
		</para>
		<para>
			It is not recommended that applications frequently establish connections
			to databases by creating autoreleased instances when database access
			is required, because there are no guarantees that establishing a
			connection will be an efficient operation. However, if for some reason
			an autoreleased instance is desired, the
			<methodname><html:a href="connectionWithURL.xml">connectionWithURL:options:status:</html:a></methodname>
			class method is provided for this purpose.
		</para>
		<para>
			Similarly, note that calling this method may cause name resolution to occur
			or remote network connections to be established, which could block
			the calling thread for some time. Applications should not call this
			method on a UI thread.
		</para>
	</refsection>

	<refsection>
		<title>Example</title>
		<example>
			<title><html:a href="initWithURL.m">Establishing a database connection with initWithURL:options:status:</html:a></title>
			<programlisting xml:space="preserve"><classname>NGDBConnection</classname> *<varname>db</varname>;
<classname>NSError</classname> *<varname>error</varname> = <literal>NULL</literal>;

if(!(<varname>db</varname> = [[<classname>NGDBConnection</classname> <methodname>alloc</methodname>] <methodname>initWithURL:</methodname>[<classname>NSURL</classname> <methodname>URLWithString:</methodname><literal>@"sqlite:///Users/me/example.db"</literal>] options:<literal>nil</literal> status:&amp;<varname>error</varname>]]))
{
	<function>NSLog</function>(<literal>@"Error establishing database connection: %@"</literal>, <varname>error</varname>);
	[<varname>error</varname> <methodname>release</methodname>];
	return <literal>-1</literal>;
}
if([<varname>db</varname> <methodname>rowForQuery:</methodname><literal>@"SELECT [id] FROM {users} WHERE [name] = ?"</literal> status:&amp;<varname>error</varname>, <literal>@"johnsmith"</literal>, <literal>nil</literal>])
{
	[<varname>db</varname> <methodname>release</methodname>];
	return <literal>1</literal>;
}
if(<varname>error</varname>)
{
	<function>NSLog</function>(<literal>@"Error executing query: %@"</literal>, <varname>error</varname>);
	[<varname>error</varname> <methodname>release</methodname>];
	[<varname>db</varname> <methodname>release</methodname>];
	return <literal>-1</literal>;
}
[<varname>db</varname> <methodname>release</methodname>];
return <literal>0</literal>;
</programlisting>
		</example>
	</refsection>
	
	<refsection>
		<title>When to implement</title>
		<para>
			Drivers should not need to override this method, and doing so will
			have no effect.
		</para>
	</refsection>
	
	<refsection>
		<title>Availability</title>
		<para>
			Available in NGDatabase 1.0.0 and later.
		</para>
	</refsection>
	
	<refsection>
		<title>See also</title>
		<itemizedlist>
			<listitem>
				<methodname><html:a href="connectionWithURL.xml">connectionWithURL:options:status:</html:a></methodname>
			</listitem>
		</itemizedlist>
	</refsection>
</refentry>
